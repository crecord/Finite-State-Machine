/* Doodle Drawing Library
* Project 2
* Caroline Record
* 10/4/12
 */

/*
 * Root container for all drawable elements.
 */
function Doodle (context) {
	// The drawing context for the object, generated by a canvas
    this.context = context;
    //An array of the top-level drawable elements in this doodle.
    this.children = [];
    //draws its children if child is invisible it doesn't draw.
  	}

// draws all the primitives
Doodle.prototype.draw = function() {
		console.log("numimages and loaded", numImages, numLoaded);
		var context2 = this.context;
		var children = this.children;
		var self= this;
		// creates a time buffer for the images to load
		if (numImages != numLoaded){
			setTimeout(function(){ self.draw(context2);}, 300);
		}
		else {
			for (var i=0; i< this.children.length; i++){
				  	var currentChild = this.children[i];
					currentChild.draw(this.context);
  			}
  		}
 
};


/* Base class for all drawable objects.
 * 
 */
function Drawable (attrs) {
    var dflt = { 
        left: 0,
        visible: true,
        top:0,
    };
    attrs = mergeWithDefault(attrs, dflt);
    // constructor code here
    this.left= attrs.left;
    this.visible = attrs.visible;
    this.top = attrs.top; 
}

/*
 * Summary: Uses the passed in context object (passed in by a doodle object)
 * to draw itself.
 */
Drawable.prototype.draw = function(context) {
    console.log("ERROR: Calling unimplemented draw method on drawable object.");
};


/* Base class for objects that cannot contain child objects.
 * Do not modify this class!
 * creates some default values
 */
function Primitive(attrs) {
    var dflt = {
        lineWidth: 1,
        color: "black"
    };
    attrs = mergeWithDefault(attrs, dflt);
    Drawable.call(this, attrs);
    this.lineWidth = attrs.lineWidth;
    this.color = attrs.color;


}
Primitive.inheritsFrom(Drawable);

/*A Text object draws text with the given attributes. Note: Text is always drawn up from the bottom of the
object. This is because there is no simple way to measure the height of a text string using canvas, so we
explicitly define it with height.

attrs: An object containing values for each of the fields in the object. If the attrs parameter is
not specified, or if one of the fields is not specified, use predefined defaults (defined for you).
*/

function Text(attrs) {
    var dflt = {
        content: "",
        fill: "black",
        font: "12pt Helvetica",
        height: 12
    };
    attrs = mergeWithDefault(attrs, dflt);
    Drawable.call(this, attrs);
	//constructor code 
    this.content=attrs.content;
    this.fill = attrs.fill; 
    this.font = attrs.font;
    this.height = attrs.height;
    this.left = attrs.left;
};

Text.inheritsFrom(Drawable);

//draw: Draw the text using the values defined in attrs   
Text.prototype.draw = function (c) {
	if(this.visible === true){
    	c.font = this.font;
    	c.fillStyle = this.fill;
    	c.fillText(this.content,this.left,this.height);
	}
};


// these are globals that keep track of how many loaded images there are versus how many images there are total.
numImages = 0;
numLoaded = 0;


/*A DoodleImage object draws an image.
*attrs: An object containing values for each of the fields in the object. If the attrs parameter is
*not specified, or if one of the fields is not specified, use predefined defaults (defined for you).
*/
function DoodleImage(attrs) {
    var dflt = {
        width: -1,
        height: -1,
        src: "",
    };
    attrs = mergeWithDefault(attrs, dflt);
    Drawable.call(this, attrs);
    this.src= attrs.src;
    // creates a new image element
    this.img =document.createElement("IMG");
    // increments the number of pics loaded
	this.img.onload = function (){
    		numLoaded +=1;
    }
    this.img.src = this.src; 
    numImages+=1;
    // These conditionals set the width and height of the image. If the user doesn't 
    //define dimensions the default will be the original width and height of the image.
	if ( attrs.width >=0){
		this.width = attrs.width;
	}
	else{
		this.width = this.img.width;
	}
	if (attrs.height >= 0){
	    this.height = attrs.height;
	}
	else{
		this.height = this.img.height;
	}
    //this.left=attrs.left;
    //this.top =attrs.top;
}
DoodleImage.inheritsFrom(Drawable);

//draw: Draw the image using the specified source, with the specified width and height.
DoodleImage.prototype.draw = function (context) {
    if(this.visible === true){
    	context.drawImage(this.img,this.left,this.top,this.width,this.height);	
    }
};

// line draws a single line
function Line(attrs) {
    var dflt = {
        startX: 0,
        startY: 0,
        endX: 0,
        endY: 0
    };
    attrs = mergeWithDefault(attrs, dflt);
    Primitive.call(this, attrs);
    this.startX=attrs.startX;
    this.startY=attrs.startY;
    this.endX=attrs.endX;
    this.endY=attrs.endY;
    this.lineWidth = attrs.lineWidth;
    this.color = attrs.color;
}

Line.inheritsFrom(Primitive);

// draw a single line
Line.prototype.draw = function (context) {
	//console.log(this.visible);
	if(this.visible === true){
		context.lineWidth = this.lineWidth;
		context.beginPath();
		context.moveTo(this.startX,this.startY);
		context.lineTo(this.endX,this.endY);
		context.strokeStyle = this.color;
		context.stroke();
	}
};

//draws a rectangle
function Rectangle(attrs) {
    var dflt = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
    };
    attrs = mergeWithDefault(attrs, dflt);
    Primitive.call(this, attrs);
	// rest of constructor code here
	this.x = attrs.x;
	this.y = attrs.y;
	this.width = attrs.width;
	this.hieght = attrs.height;
	this.color = attrs.color;
	this.lineWidth = attrs.lineWidth;
}
Rectangle.inheritsFrom(Primitive);

// draws rectangle
Rectangle.prototype.draw = function (context) {
	if(this.visible === true){
    	context.strokeStyle= this.color;
    	context.lineWidth = this.lineWidth;
		context.strokeRect(this.x,this.y,this.width, this.hieght);
	}
};

//The constructor for the container
function Container(attrs) {
    var dflt = {
        width: 100,
        height: 100,
        fill: false,
        borderColor: "black",
        borderWidth: 0,
    };
    attrs = mergeWithDefault(attrs, dflt);
    Drawable.call(this, attrs);    
    this.children = [];
    this.width = attrs.width;
    this.height = attrs.height;
    this.fill=attrs.fill;
    this.borderColor=attrs.borderColor;
    this.borderWidth = attrs.borderWidth;
    this.left = attrs.left;
    this.id="container"
}

Container.inheritsFrom(Drawable);

//draw: Draws itself and its children. If a child is not visible 
//(visible property set to false), does not
//draw it.
Container.prototype.draw = function (context) {	
    context.save(); 
    //translates each container
    context.translate(this.left, this.top);
    context.beginPath();
    context.rect(0,0,this.width, this.height);
    if (this.fill !== false){
   			context.fillStyle = this.fill;
   			console.log(this.fill);
			context.fill();
	}
    if (this.borderWidth !== 0) {
    		//debugger;
    		context.strokeStyle= this.borderColor;
    		context.lineWidth = this.borderWidth;
    		context.stroke();
    }
    	// clips the boarders
    	context.clip();
    
    // draws all children  
    for (var i=0; i< this.children.length; i++){ 
       	console.log("iterator:" + i);
  		var currentChild = this.children[i];
  		context.save();	
		currentChild.draw(context);
		context.restore();
	}	
	context.restore();

};

